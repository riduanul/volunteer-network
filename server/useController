<div className="px-4 grid gap-3 grid-cols-12 md:grid-cols-6 lg:grid-cols-12">
  <div className="col-span-12 md:col-span-6 lg:col-span-4">
    <StatCards />
  </div>
  <div className="col-span-12 md:col-span-3 lg:col-span-4">
    <CoinRevenueGraph />
  </div>
  <div className="col-span-12 md:col-span-3 lg:col-span-4">
    <ImageSpaceGraph />
  </div>
</div>

import React, { useEffect, useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import {
  useGetCoinRevenueQuery,
  useGetImageRevenueQuery,
  useGetSpaceRevenueQuery,
} from "../../../features/dashboardStat/revenueApi";
import { setCoinTotals, setImageTotals, setSpaceTotals } from "../../../features/dashboardStat/totalSlice";
import StatCards from "./StatCards"; // Make sure StatCards is imported

function DashboardStats() {
  const [interval, setInterval] = useState("daily");

  const dispatch = useDispatch();

  // Fetch data
  const { data: coinData, refetch: refetchCoin } = useGetCoinRevenueQuery(interval);
  const { data: imageData, refetch: refetchImage } = useGetImageRevenueQuery(interval);
  const { data: spaceData, refetch: refetchSpace } = useGetSpaceRevenueQuery(interval);

  // Totals from Redux
  const totals = useSelector((state) => state.totals);

  useEffect(() => {
    // Refetch data when the interval changes
    refetchCoin();
    refetchImage();
    refetchSpace();
  }, [interval]);

  useEffect(() => {
    // Update Redux state when data changes
    if (coinData?.totals) {
      dispatch(setCoinTotals({
        count: coinData.totals.totalCount,
        earnings: coinData.totals.totalEarnings,
      }));
    }

    if (imageData?.totals) {
      dispatch(setImageTotals({
        count: imageData.totals.totalCount,
        earnings: imageData.totals.totalEarnings,
      }));
    }

    if (spaceData?.totals) {
      dispatch(setSpaceTotals({
        count: spaceData.totals.totalCount,
        earnings: spaceData.totals.totalEarnings,
      }));
    }
  }, [coinData, imageData, spaceData, dispatch]);

  return (
    <div>
      {/* Interval Buttons */}
      <div className="mt-4">
        {["daily", "weekly", "monthly", "yearly"].map((type) => (
          <button
            key={type}
            className={`px-4 py-1 mr-2 ${interval === type ? "bg-blue-500 text-white" : "bg-gray-200"}`}
            onClick={() => setInterval(type)}
          >
            {type.charAt(0).toUpperCase() + type.slice(1)}
          </button>
        ))}
      </div>

      {/* Stat Cards */}
      <div className="mt-4 grid grid-cols-3 gap-4">
        <StatCards coin={totals.coin} image={totals.image} space={totals.space} />
      </div>
    </div>
  );
}

export default DashboardStats;
import { FiTrendingDown, FiTrendingUp } from "react-icons/fi";

function StatCards({ coin, image, space }) {
  return (
    <>
      <Card
        title="Coin Revenue"
        value={`$${coin.earnings}`}
        pillText="2.75%"
        trend={coin.earnings > 0 ? "up" : "down"}
        period="From Jan 1st - Jul 31st"
      />
      <Card
        title="Image Revenue"
        value={`$${image.earnings}`}
        pillText="1.01%"
        trend={image.earnings > 0 ? "up" : "down"}
        period="From Jan 1st - Jul 31st"
      />
      <Card
        title="Space Revenue"
        value={`$${space.earnings}`}
        pillText="60.75%"
        trend={space.earnings > 0 ? "up" : "down"}
        period="Previous 365 days"
      />
    </>
  );
}

const Card = ({ title, value, pillText, trend, period }) => {
  return (
    <div className="col-span-4 p-4 rounded border border-stone-300">
      <div className="flex mb-8 items-start justify-between">
        <div>
          <h3 className="flex items-start text-stone-500 mb-2 text-sm">
            {title}
          </h3>
          <p className="text-3xl font-semibold">{value}</p>
        </div>
        <span
          className={`text-xs flex items-center gap-1 font-medium px-2 py-1 rounded ${
            trend === "up"
              ? "bg-green-100 text-green-700"
              : "bg-red-100 text-red-700"
          }`}
        >
          {trend === "up" ? <FiTrendingUp /> : <FiTrendingDown />}
        </span>
        {pillText}
      </div>
      <p className="text-xs flex items-start text-stone-500">{period}</p>
    </div>
  );
};

export default StatCards;
