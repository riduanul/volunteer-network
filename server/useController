const get_earnings = async (interval) => {
  const now = new Date();
  let startDate;

  switch (interval) {
    case "daily":
      startDate = new Date(now.setHours(0, 0, 0, 0));
      break;
    case "weekly":
      const firstDayOfWeek = now.getDate() - now.getDay();
      startDate = new Date(now.setDate(firstDayOfWeek));
      break;
    case "monthly":
      startDate = new Date(now.getFullYear(), now.getMonth(), 1);
      break;
    case "yearly":
      startDate = new Date(now.getFullYear(), 0, 1);
      break;
    default:
      throw new Error("Invalid interval provided");
  }

  const endDate = new Date();



  // Image Selling Revenue
  const imageRevenue = await Image.aggregate([
    { $unwind: "$sold_details" },
    { $match: { "sold_details.date": { $gte: startDate, $lte: endDate } } },
    { $group: { _id: null, total: { $sum: "$sold_details.price" } } },
  ]);

  // Ad Revenue
  const ad-revenue = await AdRevenue.aggregate([
    { $match: { date: { $gte: startDate, $lte: endDate } } },
    { $group: { _id: null, total: { $sum: "$amount" } } },
  ]);

  // Coin Sales (if you have a `Transaction` model or equivalent)
  const coin revenue = await Transaction.aggregate([
    { $match: { date: { $gte: startDate, $lte: endDate } } },
    { $group: { _id: null, total: { $sum: "$amount" } } },
  ]);

  const totalEarnings =
    (imageRevenue[0]?.total || 0) +
    (adRevenue[0]?.total || 0) +
    (coinRevenue[0]?.total || 0);

  return total_earnings;
};
};
